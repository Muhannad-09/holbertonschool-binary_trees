#include "binary_trees.h"

/**
 * bst_insert - inserts a value in a Binary Search Tree
 * @tree: double pointer to the root node of the BST
 * @value: value to store in the node to be inserted
 *
 * Return: pointer to the created node, or NULL on failure
 */
bst_t *bst_insert(bst_t **tree, int value)
{
	bst_t *current, *new_node;

	if (!tree)
		return (NULL);

	if (!*tree)
	{
		*tree = binary_tree_node(NULL, value);
		return (*tree);
	}

	current = *tree;

	if (value < current->n)
	{
		if (current->left)
			return (bst_insert(&current->left, value));

		new_node = binary_tree_node(current, value);
		if (!new_node)
			return (NULL);
		current->left = new_node;
		return (new_node);
	}
	else if (value > current->n)
	{
		if (current->right)
			return (bst_insert(&current->right, value));

		new_node = binary_tree_node(current, value);
		if (!new_node)
			return (NULL);
		current->right = new_node;
		return (new_node);
	}

	/* If value already exists, do not insert */
	return (NULL);
}
